{"version":3,"sources":["reducers/dataReducer.js","reducers/index.js","actions/types.js","store.js","actions/dataActions.js","components/EnterID.js","components/HomePage.js","items/Slider.js","components/Experiment.js","components/Success.js","App.js","serviceWorker.js","index.js"],"names":["initialState","dbInfo","exptToDisplay","participantID","questionKeys","isFinalQ","answer","combineReducers","expt","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","getExpt","which_db","study_name","expt_name","dispatch","API_URL","axios","get","then","res","experiments","data","thisExpt","forEach","element","exptName","console","log","sendExpt","which_col","dataToPOST","post","is","storeAnswer","question","que","ans","EnterID","props","ParticipantID","onChange","bind","showExpt","this","getData","username","match","params","studyExpt","storeDBInfo","studyName","split","e","setState","target","name","value","storePartID","Object","keys","filter","str","charAt","storeQKeys","length","history","push","className","onClick","Component","connect","which_database","which_collection","db","col","part_id","HomePage","Slider","showSlider","onSubmit","resetState","childRef","undefined","min","lowRange","max","highRange","submitted","Experiment","onFinalSubmit","whichSubmit","alert","child","currentQ","qKey","nextQ","Number","lastQ","toString","key","ref","participant","displayExpt","Success","finalObj","map","entry","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92c4423c.chunk.js","sourcesContent":["import {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  Q_KEYS,\r\n  FINAL_Q,\r\n  ANSWER\r\n} from \"../actions/types\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst initialState = {\r\n  dbInfo: {},\r\n  exptToDisplay: {},\r\n  participantID: '',\r\n  questionKeys: [],\r\n  isFinalQ: false,\r\n  answer: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case DB_INFO:\r\n      return {\r\n        ...state,\r\n        dbInfo: action.payload\r\n      };\r\n    case GET_EXPT:\r\n      return {\r\n        ...state,\r\n        exptToDisplay: action.payload\r\n      };\r\n    case PART_ID:\r\n      return {\r\n        ...state,\r\n        participantID: action.payload\r\n      };\r\n    case Q_KEYS:\r\n      return {\r\n        ...state,\r\n        questionKeys: action.payload\r\n      };\r\n    case FINAL_Q:\r\n      return {\r\n        ...state,\r\n        isFinalQ: action.payload\r\n      };\r\n    case ANSWER:\r\n      return {\r\n        ...state,\r\n        answer: [...state.answer, action.payload]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nexport default combineReducers({\r\n  expt: dataReducer\r\n});","export const DB_INFO = \"DB_INFO\";\r\nexport const GET_EXPT = \"GET_EXPT\";\r\nexport const PART_ID = \"PART_ID\";\r\nexport const SEND_EXPT = \"SEND_EXPT\";\r\nexport const Q_KEYS = \"Q_KEYS\";\r\nexport const FINAL_Q = \"FINAL_Q\";\r\nexport const ANSWER = \"ANSWER\";","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  SEND_EXPT,\r\n  Q_KEYS,\r\n  FINAL_Q,\r\n  ANSWER\r\n} from \"./types\"\r\n\r\nexport const storeDBInfo = (which_database, which_collection) => dispatch => {\r\n  dispatch({\r\n    type: DB_INFO,\r\n    payload: {\r\n      db: which_database,\r\n      col: which_collection\r\n    }\r\n  })\r\n}\r\n\r\nexport const getExpt = (which_db, study_name, expt_name) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + '/info/' + 'studyName-' + study_name;\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const experiments = res.data.experiments;\r\n      var thisExpt = {};\r\n      experiments.forEach(element => {\r\n        if (element.exptName == expt_name) {\r\n          thisExpt = element;\r\n        }\r\n      });\r\n      dispatch({\r\n        type: GET_EXPT,\r\n        payload: thisExpt\r\n      })\r\n      console.log(\"dispatched\");\r\n    })\r\n}\r\n\r\nexport const storePartID = (part_id) => dispatch => {\r\n  dispatch({\r\n    type: PART_ID,\r\n    payload: part_id\r\n  })\r\n}\r\n\r\nexport const sendExpt = (which_db, which_col, dataToPOST) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + \"/\" + which_col;\r\n  axios\r\n    .post(API_URL, dataToPOST)\r\n    .then(res => {\r\n      // console.log(res);\r\n    })\r\n}\r\n\r\nexport const storeQKeys = (keys) => dispatch => {\r\n  dispatch({\r\n    type: Q_KEYS,\r\n    payload: keys\r\n  })\r\n}\r\n\r\nexport const isFinalQ = (is) => dispatch => {\r\n  dispatch({\r\n    type: FINAL_Q,\r\n    payload: is\r\n  })\r\n}\r\n\r\n// entry should be in the format of: { \"somequestion\": \"answer\" }\r\nexport const storeAnswer = (question, answer) => dispatch => {\r\n  dispatch({\r\n    type: ANSWER,\r\n    payload: {\r\n      que: question,\r\n      ans: answer\r\n    }\r\n  })\r\n}","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\nclass EnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    console.log(questionKeys);\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.history.push(\"/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Note: once you submit your answer for one question, you won't be\r\n        able to change it. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, isFinalQ }\r\n)(EnterID);\r\n","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>This is the home page</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\n// This component should do the following:\r\n// - Display question\r\n// - Display an experiment item (in this case, a slider)\r\n// - Store answer into Redux store upon submission \r\nclass Slider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.state = {\r\n    //   submitted: false,\r\n    //   // question: this.props.question,\r\n    //   // lowRange: this.props.lowRange,\r\n    //   // highRange: this.props.highRange,\r\n    //   value: 0,\r\n    // }\r\n    this.state = this.initialState;\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showSlider = this.showSlider.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.resetState = this.resetState.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      value: 0\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n   }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showSlider() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.question} <br/>\r\n        <input \r\n          type=\"range\"\r\n          min={this.props.lowRange}\r\n          max={this.props.highRange}\r\n          name=\"value\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n        {this.state.value} <br/>\r\n        {\r\n          !this.state.submitted && \r\n          <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n            onClick={this.onSubmit}/>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // part of template: \r\n  onSubmit() {\r\n    const question = this.props.question;\r\n    // put answer in our redux store to be sent via API later\r\n    this.props.storeAnswer(question, this.state.value);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.showSlider()} <br/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Slider);","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  sendExpt,\r\n  isFinalQ,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\"\r\n\r\nclass Experiment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.child.resetState();\r\n\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n\r\n    // checking if the next question is the final question \r\n    // we have to regulate name of question (such as q0, q1, q2 ...)\r\n    // because we are not using mongoose schema\r\n    const currentQ = this.props.match.params.qKey.charAt(1);\r\n    const nextQ = Number(currentQ) + 1;\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    if (nextQ == Number(lastQ.charAt(1))) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n\r\n    // put answer into store. EDIT: no need for this anymore\r\n    // this funcationality is in individual components now  \r\n    // const question = this.props.expt.exptToDisplay[this.props.match.params.qKey][\"Question\"];\r\n    // this.props.storeAnswer(question, this.state.value);\r\n    this.props.history.push(\"/\" + username + \"/\" + expt + \r\n      \"/q\" + nextQ.toString());\r\n\r\n    // storing the lowest range of the next question for UIUX purposes \r\n    // not modular\r\n    // const nextQMin = this.props.expt.exptToDisplay[\"q\" + nextQ.toString()][\"lowRange\"];\r\n    // this.setState({ value: nextQMin })\r\n  }\r\n\r\n  onFinalSubmit() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n\r\n    // const question = this.props.expt.exptToDisplay[this.props.match.params.qKey][\"Question\"];\r\n    // this.props.storeAnswer(question, this.state.value);\r\n    this.props.history.push(\"/\" + username + \"/\" + expt + \"/success\");\r\n  }\r\n\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <input type=\"submit\" className=\"btn\" value=\"Next Question\"\r\n            onClick={this.onSubmit}/> :\r\n          <div>\r\n            This is the final question. <p></p>\r\n            <input type=\"submit\" className=\"btn\" value=\"Submit\"\r\n              onClick={this.onFinalSubmit}/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    // console.log(this.props);\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    // console.log(expt);\r\n    if (expt[key]) {\r\n      // NEED TO make each if statement modular\r\n      // a map here on a list of documents of experiment types (each document\r\n      // contains experiment parameters) to match expt[key][\"Type\"] \r\n      // with \"slider\"\r\n      if (expt[key][\"Type\"] == \"slider\") {\r\n        const lowRange = expt[key][\"lowRange\"];\r\n        const highRange = expt[key][\"highRange\"];\r\n        const question = expt[key][\"Question\"];\r\n        // console.log(question);\r\n        return (\r\n          <div className=\"container\">\r\n            <Slider childRef={ref => (this.child = ref)}\r\n              question={question} lowRange={lowRange} \r\n              highRange={highRange} />\r\n            <br/>\r\n            <this.whichSubmit />\r\n          </div>\r\n        )\r\n      }\r\n      // add more if statements here for other experiments types\r\n      // follow the format of the slider if statement\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nExperiment.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  sendExpt: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, sendExpt, isFinalQ, storeAnswer }\r\n)(Experiment);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  sendExpt\r\n} from \"../actions/dataActions\"\r\n\r\nclass Success extends Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      this.props.sendExpt(username, expt, finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSuccess.propTypes = {\r\n  sendExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { sendExpt }\r\n)(Success);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport EnterID from \"./components/EnterID\";\nimport HomePage from \"./components/HomePage\";\nimport Experiment from \"./components/Experiment\";\nimport Success from \"./components/Success\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/participant-app/\">\n        <div className=\"App\">\n          < Route exact path=\"/\" component={HomePage} />\n          < Route exact path=\"/:username/:expt/success\" component={Success}/>\n          < Route exact path=\"/:username/:expt\" component={EnterID} />\n          < Route exact path=\"/:username/:expt/:qKey\" component={Experiment}/>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
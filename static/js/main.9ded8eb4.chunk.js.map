{"version":3,"sources":["reducers/dataReducer.js","reducers/index.js","actions/types.js","store.js","actions/dataActions.js","components/EnterID.js","components/HomePage.js","items/Slider.js","items/NormalCurve.jsx","components/Experiment.js","components/Success.js","App.js","serviceWorker.js","index.js"],"names":["initialState","dbInfo","exptToDisplay","participantID","questionKeys","numQ","Number","isFinalQ","answer","fileContent","combineReducers","expt","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","getExpt","which_db","study_name","expt_name","dispatch","API_URL","axios","get","then","res","experiments","data","thisExpt","forEach","element","exptName","sendExpt","which_col","dataToPOST","post","setNumQ","num","is","storeAnswer","question","que","ans","EnterID","props","ParticipantID","onChange","bind","showExpt","this","getData","username","match","params","studyExpt","storeDBInfo","studyName","split","e","setState","target","name","value","storePartID","allKeys","Object","keys","console","log","filter","str","charAt","storeQKeys","length","history","push","className","onClick","Component","connect","which_database","which_collection","db","col","part_id","HomePage","Slider","resetState","onSubmit","showSlider","childRef","undefined","min","lowRange","max","highRange","submitted","style","color","NormalCurve","sliderRef","React","createRef","rectRef","svgRef","areaRef","dotReturn","curveArea","triMouseDown","triDrag","triUp","questionNC","key1","graph1","key2","graph2","col11","col21","overlapVals","Math","abs","col22","xPos","yPos","xPosOrig","CX","distancing1","distancing","CY","ceilDist","stroke","fill","fillOpacity","strokeOpacity","cx","cy","r","circRad","distancing2","preventDefault","svgPre","current","ptPre","createSVGPoint","x","clientX","svgPPre","matrixTransform","getScreenCTM","inverse","prevState","triDown","mousePointerRange","triCent1","triCent2","svgPPree","screenX","y","screenY","svgX","pt","svg","svgP","round","len2","colLim2","col12","len1","colLim1","col2","innerHTML","onMouseMove","onMouseUp","width","svgWidth","height","svgHeight","ref","opacity","Array","map","colValHeiS","row","colValHeiS2","dotReturn2","points","onMouseDown","class","backgroundColor","unitHeight","ceil","isDown","rectX","down","Experiment","whichItem","onNextQuestion","onFinalSubmit","whichSubmit","alert","nextQ","toString","childSlider","nextQuestion","childNormalCurve","key","qKey","dataFileName","dataFileContent","fileName","participant","displayExpt","Success","finalObj","entry","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ded8eb4.chunk.js","sourcesContent":["import {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"../actions/types\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst initialState = {\r\n  dbInfo: {},\r\n  exptToDisplay: {},\r\n  participantID: '',\r\n  questionKeys: [],\r\n  numQ: Number,\r\n  isFinalQ: false,\r\n  answer: [],\r\n  fileContent: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case DB_INFO:\r\n      return {\r\n        ...state,\r\n        dbInfo: action.payload\r\n      };\r\n    case GET_EXPT:\r\n      return {\r\n        ...state,\r\n        exptToDisplay: action.payload\r\n      };\r\n    case PART_ID:\r\n      return {\r\n        ...state,\r\n        participantID: action.payload\r\n      };\r\n    case Q_KEYS:\r\n      return {\r\n        ...state,\r\n        questionKeys: action.payload\r\n      };\r\n    case NUM_Q:\r\n      return {\r\n        ...state,\r\n        numQ: action.payload\r\n      }\r\n    case FINAL_Q:\r\n      return {\r\n        ...state,\r\n        isFinalQ: action.payload\r\n      };\r\n    case ANSWER:\r\n      return {\r\n        ...state,\r\n        answer: [...state.answer, action.payload]\r\n      };\r\n    case ITEM_DATA:\r\n      return {\r\n        ...state,\r\n        fileContent: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nexport default combineReducers({\r\n  expt: dataReducer\r\n});","export const DB_INFO = \"DB_INFO\";\r\nexport const GET_EXPT = \"GET_EXPT\";\r\nexport const PART_ID = \"PART_ID\";\r\nexport const SEND_EXPT = \"SEND_EXPT\";\r\nexport const Q_KEYS = \"Q_KEYS\";\r\nexport const NUM_Q = \"NUM_Q\";\r\nexport const FINAL_Q = \"FINAL_Q\";\r\nexport const ANSWER = \"ANSWER\";\r\nexport const ITEM_DATA = \"ITEM_DATA\";","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  SEND_EXPT,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"./types\"\r\n\r\n// Input: name of a database, name of a collection \r\n// Output: a JSON object containing the input\r\n// Action: puts database - collection information into redux store so that \r\n//         it's easily accessible for all components\r\nexport const storeDBInfo = (which_database, which_collection) => dispatch => {\r\n  dispatch({\r\n    type: DB_INFO,\r\n    payload: {\r\n      db: which_database,\r\n      col: which_collection\r\n    }\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a study, name of an experiment\r\n// Output: a JSON object containing configuration data of the given experiment \r\n//         in the given study \r\n// Action: a GET request to get the output. \r\nexport const getExpt = (which_db, study_name, expt_name) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + '/info/' + 'studyName-' + study_name;\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const experiments = res.data.experiments;\r\n      var thisExpt = {};\r\n      experiments.forEach(element => {\r\n        if (element.exptName == expt_name) {\r\n          thisExpt = element;\r\n        }\r\n      });\r\n      dispatch({\r\n        type: GET_EXPT,\r\n        payload: thisExpt\r\n      })\r\n    })\r\n}\r\n\r\n// Input: participant ID\r\n// Output: participant ID\r\n// Action: puts participant ID into redux store so that it's easily accessible \r\n//         for all components \r\nexport const storePartID = (part_id) => dispatch => {\r\n  dispatch({\r\n    type: PART_ID,\r\n    payload: part_id\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a collection, JSON object containing \r\n//        user responses\r\n// Output: NONE\r\n// Action: a POST request to send user response to the appropriate collection \r\n//         in Mongo database. \r\nexport const sendExpt = (which_db, which_col, dataToPOST) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + \"/\" + which_col;\r\n  axios\r\n    .post(API_URL, dataToPOST)\r\n    .then(res => {\r\n      // console.log(res);\r\n    })\r\n}\r\n\r\n// Input: an array representing questions keys of an experiment\r\n// Output: the same array\r\n// Action: puts the array into redux store so that it's easily accessible for \r\n//         all components\r\nexport const storeQKeys = (keys) => dispatch => {\r\n  dispatch({\r\n    type: Q_KEYS,\r\n    payload: keys\r\n  })\r\n}\r\n\r\n// Input: a number representing the index of the questions keys array. \r\n//        This number tells Experiment.js what to display next\r\n// Output: the same number\r\n// Action: puts the number into redux store so that it's easily accessible \r\n//         for all components\r\nexport const setNumQ = (num) => dispatch => {\r\n  dispatch({\r\n    type: NUM_Q,\r\n    payload: num\r\n  })\r\n}\r\n\r\n// Input: a boolean indicating whether the next question to display is the \r\n//        last question. This boolean determines which type of <button> to show\r\n// Output: the same boolean\r\n// Action: puts the boolean into redux store so that it's easily accessible \r\n//         for all components\r\nexport const isFinalQ = (is) => dispatch => {\r\n  dispatch({\r\n    type: FINAL_Q,\r\n    payload: is\r\n  })\r\n}\r\n\r\n// Input: a string representing a question, any representing an answer\r\n// Output: a JSON object containing the inputs\r\n// Action: puts the object into redux store. Notice the redux reducer \r\n//         appends the answer to the existing state. In this way, ```Success.js``` can send all stored answers via API at the end of the experiment. \r\nexport const storeAnswer = (question, answer) => dispatch => {\r\n  dispatch({\r\n    type: ANSWER,\r\n    payload: {\r\n      que: question,\r\n      ans: answer\r\n    }\r\n  })\r\n}\r\n\r\n// ###DEPRECATED###\r\n// Reason: there's a lag in receiving the output, which causes errors when \r\n//         displaying experiment items. \r\n// Input: name of a database, name of an uploaded file whose content is a \r\n//        JSON object containing experiment item data\r\n// Output: the content of the file\r\n// Action: puts the output into redux store so that it's easily accessible \r\n//         for all components.\r\nexport const getItemData = (which_database, fileName) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_database + \"/itemData\";\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const fileContent = res.data.filter(doc => doc.fileName == fileName)[0].fileContent\r\n      dispatch({\r\n        type: ITEM_DATA,\r\n        payload: fileContent\r\n      })\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  setNumQ,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\nclass EnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      console.log(allKeys);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    // console.log(questionKeys);\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(0);\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Note: once you click \"Ok\" for one question, you won't be\r\n        able to change your response. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, setNumQ, isFinalQ }\r\n)(EnterID);\r\n","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>This is the home page</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\n// This component does the following:\r\n// - Display question\r\n// - Display an experiment item (in this case, a slider)\r\n// - Store answer into Redux store upon submission \r\nclass Slider extends Component {\r\n  constructor() {\r\n    // putting super() here so that we can use this.blahblah\r\n    super();\r\n    this.state = this.initialState;\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.showSlider = this.showSlider.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      value: 0\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showSlider() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.question} <br/>\r\n        <input \r\n          type=\"range\"\r\n          min={this.props.lowRange}\r\n          max={this.props.highRange}\r\n          name=\"value\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n        {this.state.value} <br/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.question;\r\n    // put answer in our redux store to be sent via API later\r\n    this.props.storeAnswer(question, this.state.value);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.showSlider()} <br/>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question will be \r\n              recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Slider);","import React, { Component } from 'react';\r\nimport './NormalCurve.css';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nclass NormalCurve extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.sliderRef = React.createRef();\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n\r\n    this.dotReturn = this.dotReturn.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.triMouseDown = this.triMouseDown.bind(this);\r\n    this.triDrag = this.triDrag.bind(this);\r\n    this.triUp = this.triUp.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  get initialState() {\r\n    const unitHeight = this.props.data[\"max-height\"];\r\n    const circRad = this.props.data[\"circle-radius\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n    const ceilDist = height - 50;\r\n    const length = Math.ceil((distancing * this.props.data[\"len1\"] * 2 + \r\n      distancing * this.props.data[\"len2\"] * 2) / 100) * 100;\r\n    const colNum = Math.round(length / distancing);\r\n    // console.log(height, distancing, ceilDist, colNum);\r\n    return {\r\n      submitted: false,      \r\n      x: 0, y: 0, isDown: false,\r\n      rectX: 12.5,\r\n      down: false,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      svgX: 6,\r\n      len1: this.props.data[\"len1\"],\r\n      colValHeiS: this.props.data[\"colValHeiS\"],\r\n      len2: this.props.data[\"len2\"],\r\n      colValHeiS2: this.props.data[\"colValHeiS2\"],\r\n      distancing: distancing,\r\n      distancing1: (this.props.data[\"len2\"] + 1) * distancing,\r\n      distancing2: \r\n        (this.props.data[\"len1\"] + this.props.data[\"len2\"] + 4) * distancing,\r\n      triCent1: \r\n        Math.round((0.5 * this.props.data[\"len1\"]) * distancing) + distancing,\r\n      triCent2: \r\n        Math.round((0.5 * this.props.data[\"len2\"]) * distancing) + distancing,\r\n      mousePointerRange: 0,\r\n      triDown: false,\r\n      col11: this.props.data[\"len2\"] + 1,\r\n      col12: this.props.data[\"len1\"] + this.props.data[\"len2\"] + 1,\r\n      col21: this.props.data[\"len1\"] + this.props.data[\"len2\"] + 3,\r\n      col22: this.props.data[\"len1\"] + 2 * this.props.data[\"len2\"] + 3,\r\n      colLim1: Math.round((length - (this.props.data[\"len1\"] * distancing)) / \r\n        distancing),\r\n      colLim2: Math.round((length - (this.props.data[\"len2\"] * distancing)) / \r\n        distancing),\r\n      overlapVals: this.props.data[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  // add user x positions in here\r\n  onSubmit() {\r\n    const question = this.props.questionNC;\r\n    const key1 = this.props.graph1;\r\n    const key2 = this.props.graph2;\r\n    const answer = {\r\n      [key1]: this.state.col11,\r\n      [key2]: this.state.col21,\r\n      area: this.state.overlapVals[\r\n        Math.abs(this.state.col22 - this.state.col11)\r\n      ]\r\n    }\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  dotReturn(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n    if (xPos > 7) {\r\n      xPos = 15 - xPos;\r\n    }\r\n    const CX = this.state.distancing1 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n    var hard = <circle \r\n      className=\"icon\" stroke=\"DarkCyan\" fill=\"DarkCyan\" fillOpacity=\"0.3\" \r\n      strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n    return hard;\r\n  }\r\n\r\n  dotReturn2(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n    if (xPos > 7) {\r\n      xPos = 15 - xPos;\r\n    }\r\n    const CX = this.state.distancing2 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n    var hard = <circle \r\n      className=\"icon\" stroke=\"Crimson\" fill=\"Crimson\" fillOpacity=\"0.3\" \r\n      strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n    return hard;\r\n  }\r\n\r\n  triMouseDown(e, num) {\r\n    if (e.type === \"mousedown\") {\r\n      // console.log(\"MOUSEDOWN\");\r\n      e.preventDefault();\r\n      var svgPre = this.svgRef.current;\r\n      // Set mousePointerRange so that we know the distance from the mouse \r\n      // tip to the x-value of the triangle tip\r\n      var ptPre = svgPre.createSVGPoint();\r\n      ptPre.x = e.clientX;\r\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n      if (num === 1) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - \r\n            svgPPre.x\r\n        }));\r\n      }\r\n      else if (num === 2) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - \r\n            svgPPre.x\r\n        }));\r\n      }\r\n      // console.log(this.state);\r\n    }\r\n  }\r\n\r\n  triDrag(e) {\r\n    // Set mousePointerRange so that we know the distance from the mouse \r\n    // tip to the x-value of the triangle tip\r\n    var svgPre = this.svgRef.current;\r\n    var ptPre = svgPre.createSVGPoint();\r\n    ptPre.x = e.clientX;\r\n    var svgPPree = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n    this.setState({ x: e.screenX, y: e.screenY, svgX: svgPPree.x });\r\n    if (this.state.triDown === 2) {\r\n      // console.log(\"DRAG CONT'D\");\r\n      var svg = this.svgRef.current;\r\n      var pt = svg.createSVGPoint();\r\n      pt.x = e.clientX;\r\n      var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n      e.preventDefault();\r\n      var x = svgP.x - this.state.triCent2 + this.state.mousePointerRange;\r\n      var col = Math.round((x - 6) / this.state.distancing);\r\n      if (col < 0) {\r\n        this.setState({ distancing2: 0, col21: 0, col22: this.state.len2 - 1 });\r\n      }\r\n      else if (col > this.state.colLim2) {\r\n        this.setState({ distancing2: this.state.distancing * this.state.colLim2, \r\n          col21: this.state.colLim2, col22: this.state.colLim2 + \r\n          this.state.len2 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing2: this.state.distancing * col, col21: col, \r\n          col22: col + this.state.len2 - 1 });\r\n      }\r\n      this.curveArea(col);\r\n      // this.setState({ distancing2 : x })\r\n    }\r\n    else if (this.state.triDown === 1) {\r\n      // console.log(\"DRAG CONT'D\");\r\n      var svg = this.svgRef.current;\r\n      var pt = svg.createSVGPoint();\r\n      pt.x = e.clientX;\r\n      var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n      e.preventDefault();\r\n      var x = svgP.x - this.state.triCent1 + this.state.mousePointerRange;\r\n      var col = Math.round((x - 6) / this.state.distancing);\r\n      if (col < 0) {\r\n        this.setState({ distancing1: 0, col11: 0, col12: this.state.len1 - 1 });\r\n      }\r\n      else if (col > this.state.colLim1) {\r\n        this.setState({ distancing1: this.state.distancing * this.state.colLim1, \r\n          col11: this.state.colLim1, col2: this.state.colLim1 + \r\n          this.state.len1 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing1: this.state.distancing * col, col11: col, \r\n          col12: col + this.state.len1 - 1 });\r\n      }\r\n      this.curveArea(col);\r\n      // this.setState({ distancing2 : x })\r\n    }\r\n  }\r\n\r\n  triUp(e) {\r\n    // console.log(\"UP\");\r\n    if (this.state.triDown) {\r\n      this.setState({ triDown: false });\r\n    }\r\n  }\r\n\r\n  curveArea(col) {\r\n    if (this.state.col11 > this.state.col22 || \r\n        this.state.col12 < this.state.col21) {\r\n      this.areaRef.current.innerHTML = 0;\r\n    }\r\n    else {\r\n      this.areaRef.current.innerHTML = \r\n        this.state.overlapVals[Math.abs(this.state.col22 - this.state.col11)];\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onMouseMove={e => this.triDrag(e)} onMouseUp={e => this.triUp(e)}>\r\n        <div className=\"container\">\r\n          <h3>Question: {this.props.questionNC}</h3>\r\n        </div> \r\n        <svg width={this.state.svgWidth} height={this.state.svgHeight} \r\n          ref={this.svgRef}>\r\n          <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" />\r\n          {[...Array(this.state.len1).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS[col]).keys()].map(\r\n                (row) => this.dotReturn(col, row)\r\n              )\r\n          )}\r\n          {[...Array(this.state.len2).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS2[col]).keys()].map(\r\n                (row) => this.dotReturn2(col, row)\r\n              )\r\n          )}\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent1 + this.state.distancing1 - 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1 + 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1, \r\n                  this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\r\n          />\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent2 + this.state.distancing2 - 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2 + 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2, \r\n                  this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\r\n          />\r\n          Sorry, please use a different browser.\r\n        </svg>\r\n        <br />\r\n        <div class=\"boxed\">\r\n          <div class=\"color-box\" style={{ backgroundColor: \"DarkCyan\" }}></div>\r\n          {this.props.graph1}\r\n          <br />\r\n          <div class=\"color-box\" style={{ backgroundColor: \"Crimson\" }}></div>\r\n          {this.props.graph2}\r\n        </div>\r\n        <br />\r\n        <h4>Area Under Curve: <span ref={this.areaRef}></span> | \r\n          First x-coordinate: {this.state.col11} | \r\n          Second x-coordinate: {this.state.col21} </h4>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNormalCurve.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(NormalCurve);","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  sendExpt,\r\n  setNumQ,\r\n  isFinalQ\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\";\r\nimport NormalCurve from \"../items/NormalCurve.jsx\"\r\n\r\nclass Experiment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      whichItem: \"\"\r\n    }\r\n\r\n    this.onNextQuestion = this.onNextQuestion.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/expt/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  // method to push user to the next question \r\n  nextQuestion() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    const nextQ = this.props.expt.questionKeys[this.props.expt.numQ + 1];\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    if (nextQ == lastQ) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(this.props.expt.numQ + 1);\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + expt + \r\n      \"/\" + nextQ.toString());\r\n  }\r\n\r\n  // will be triggered when the next question is not the final question\r\n  onNextQuestion() {\r\n    // ###TODO###: add more if statements below that follow the templates \r\n    if (this.childSlider) {\r\n      this.childSlider.resetState();\r\n      this.nextQuestion();\r\n    };\r\n    if (this.childNormalCurve) {\r\n      this.childNormalCurve.resetState();\r\n      this.nextQuestion();\r\n    }; \r\n  }\r\n\r\n  // will be triggered when the next question is the final question \r\n  onFinalSubmit() {\r\n    this.props.history.push(\"/success\");\r\n  }\r\n\r\n  // decides which button to show for the next question based whether the next\r\n  // question is the final question of the experiment\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <input type=\"submit\" className=\"btn\" value=\"Next Question\"\r\n            onClick={this.onNextQuestion}/> :\r\n          <div>\r\n            This is the final question. <p></p>\r\n            <input type=\"submit\" className=\"btn\" value=\"Submit\"\r\n              onClick={this.onFinalSubmit}/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    if (expt[key]) {\r\n      // ###TODO### add more if statements here for your experiment type\r\n      // follow the following format\r\n      // ATTENTION: do NOT call methods (especially those associated with API)\r\n      // inside these cases. React keeps rendering displayExpt(), which means\r\n      // your method(s) will be called repeatedly => not good. \r\n      switch(expt[key][\"Type\"]) {\r\n        case \"slider\":\r\n          const lowRange = expt[key][\"lowRange\"];\r\n          const highRange = expt[key][\"highRange\"];\r\n          const question = expt[key][\"Question\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Slider childRef={ref => (this.childSlider = ref)}\r\n                question={question} lowRange={lowRange} \r\n                highRange={highRange} />\r\n              <br/>\r\n              {/* keep the following line */}\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n          break;\r\n        case \"normal-curve\":\r\n          const questionNC = expt[key][\"Question\"];\r\n          const graph1 = expt[key][\"Data1\"];\r\n          const graph2 = expt[key][\"Data2\"];\r\n          const dataFileName = expt[key][\"FileName\"];\r\n          const dataFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <NormalCurve childRef={ref => (this.childNormalCurve = ref)} \r\n                questionNC={questionNC} graph1={graph1} graph2={graph2} \r\n                fileName={dataFileName} data={dataFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        default: \r\n          return (<div>Unknown Experiment Type</div>)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nExperiment.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  sendExpt: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, sendExpt, setNumQ, isFinalQ }\r\n)(Experiment);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  sendExpt\r\n} from \"../actions/dataActions\"\r\n\r\nclass Success extends Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const username = this.props.expt.dbInfo.db;\r\n    const expt = this.props.expt.dbInfo.col;\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      console.log(finalObj);\r\n      this.props.sendExpt(username, expt, finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1> <br/>\r\n        Please go back to the Qualtrics survey and complete \r\n        the rest of the questions. \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSuccess.propTypes = {\r\n  sendExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { sendExpt }\r\n)(Success);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport EnterID from \"./components/EnterID\";\nimport HomePage from \"./components/HomePage\";\nimport Experiment from \"./components/Experiment\";\nimport Success from \"./components/Success\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/participant-app/\">\n        <div className=\"App\">\n          < Route exact path=\"/\" component={HomePage} />\n          < Route exact path=\"/success\" component={Success}/>\n          < Route exact path=\"/expt/:username/:expt\" component={EnterID} />\n          < Route exact path=\"/expt/:username/:expt/:qKey\" component={Experiment}/>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
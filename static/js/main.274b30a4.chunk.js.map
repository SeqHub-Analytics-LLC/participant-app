{"version":3,"sources":["reducers/dataReducer.js","reducers/index.js","actions/types.js","store.js","actions/dataActions.js","components/EnterID.js","components/HomePage.js","items/Slider.js","items/StaticText.js","items/NormalCurve.jsx","items/NormalCurveSurvey.jsx","items/Histogram.js","components/Experiment.js","components/Success.js","components/PreviewEnterID.js","components/PreviewExpt.js","components/PreviewSuccess.js","App.js","serviceWorker.js","index.js"],"names":["initialState","dbInfo","exptToDisplay","participantID","questionKeys","numQ","Number","isFinalQ","answer","fileContent","combineReducers","expt","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","storeDBInfo","which_database","which_collection","dispatch","db","col","getExpt","which_db","study_name","expt_name","API_URL","axios","get","then","res","experiments","data","thisExpt","forEach","element","exptName","storePartID","part_id","sendExpt","which_col","dataToPOST","post","storeQKeys","keys","setNumQ","num","is","storeAnswer","question","que","ans","EnterID","props","ParticipantID","onChange","bind","showExpt","this","getData","username","match","params","studyExpt","studyName","split","e","setState","target","name","value","allKeys","Object","console","log","filter","str","charAt","length","history","push","className","onClick","Component","connect","HomePage","Slider","resetState","onSubmit","showSlider","childRef","undefined","min","lowRange","max","highRange","sliderCSVKey","submitted","style","color","StaticText","showItem","text","NormalCurve","sliderRef","React","createRef","rectRef","svgRef","areaRef","dotReturn","curveArea","triMouseDown","triDrag","triUp","questionNCKey","key1","graph1legend","key2","graph2legend","col11","col21","overlapVals","Math","abs","col22","xPos","yPos","xPosOrig","CX","distancing1","distancing","CY","ceilDist","stroke","fill","fillOpacity","strokeOpacity","cx","cy","r","circRad","distancing2","preventDefault","svgPre","current","ptPre","createSVGPoint","x","clientX","svgPPre","matrixTransform","getScreenCTM","inverse","prevState","triDown","mousePointerRange","triCent1","triCent2","svgPPree","screenX","y","screenY","svgX","pt","svg","svgP","round","len2","colLim2","col12","len1","colLim1","col2","innerHTML","onMouseMove","onMouseUp","questionNC","width","svgWidth","height","svgHeight","ref","opacity","Array","map","colValHeiS","row","colValHeiS2","dotReturn2","points","onMouseDown","class","backgroundColor","graph1","graph2","unitHeight","ceil","isDown","rectX","down","NormalCurveSurvey","lengthRef","startPos1Ref","startPos2Ref","svgColReturn","dragger","distFromCent","variance","triCentCol1","variance1","triCentCol2","variance2","axisStart","colRelative","axisStartCol","axisEndCol","cols","svgColPlacement","axisEnd","text-anchor","lowVal","colNum","colNumInit","internalLength","edgeCol","edgeLength","axisWidth","startPos1","startPos2","showCoors","Histogram","graphRef","qRef","minRef","maxRef","drawChart","questionHistKey","sliderPos","histData","d3","append","attr","selectAll","enter","d","i","vertAlign","questionHist","position","margin","top","histLowRange","histHighRange","step","checked","minVal","maxVal","Experiment","whichItem","onNextQuestion","onFinalSubmit","whichSubmit","alert","nextQ","toString","childSlider","nextQuestion","childNormalCurve","childStaticText","key","qKey","dataFileName","dataFileContent","fileName","histFileContent","childHistogram","participant","displayExpt","Success","finalObj","entry","condition","link","href","PreviewEnterID","PreviewExpt","PreviewSuccess","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.274b30a4.chunk.js","sourcesContent":["import {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"../actions/types\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst initialState = {\r\n  dbInfo: {},\r\n  exptToDisplay: {},\r\n  participantID: '',\r\n  questionKeys: [],\r\n  numQ: Number,\r\n  isFinalQ: false,\r\n  answer: [],\r\n  fileContent: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case DB_INFO:\r\n      return {\r\n        ...state,\r\n        dbInfo: action.payload\r\n      };\r\n    case GET_EXPT:\r\n      return {\r\n        ...state,\r\n        exptToDisplay: action.payload\r\n      };\r\n    case PART_ID:\r\n      return {\r\n        ...state,\r\n        participantID: action.payload\r\n      };\r\n    case Q_KEYS:\r\n      return {\r\n        ...state,\r\n        questionKeys: action.payload\r\n      };\r\n    case NUM_Q:\r\n      return {\r\n        ...state,\r\n        numQ: action.payload\r\n      }\r\n    case FINAL_Q:\r\n      return {\r\n        ...state,\r\n        isFinalQ: action.payload\r\n      };\r\n    case ANSWER:\r\n      return {\r\n        ...state,\r\n        answer: [...state.answer, action.payload]\r\n      };\r\n    case ITEM_DATA:\r\n      return {\r\n        ...state,\r\n        fileContent: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nexport default combineReducers({\r\n  expt: dataReducer\r\n});","export const DB_INFO = \"DB_INFO\";\r\nexport const GET_EXPT = \"GET_EXPT\";\r\nexport const PART_ID = \"PART_ID\";\r\nexport const SEND_EXPT = \"SEND_EXPT\";\r\nexport const Q_KEYS = \"Q_KEYS\";\r\nexport const NUM_Q = \"NUM_Q\";\r\nexport const FINAL_Q = \"FINAL_Q\";\r\nexport const ANSWER = \"ANSWER\";\r\nexport const ITEM_DATA = \"ITEM_DATA\";","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  SEND_EXPT,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"./types\"\r\n\r\n// Input: name of a database, name of a collection \r\n// Output: a JSON object containing the input\r\n// Action: puts database - collection information into redux store so that \r\n//         it's easily accessible for all components\r\nexport const storeDBInfo = (which_database, which_collection) => dispatch => {\r\n  dispatch({\r\n    type: DB_INFO,\r\n    payload: {\r\n      db: which_database,\r\n      col: which_collection\r\n    }\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a study, name of an experiment\r\n// Output: a JSON object containing configuration data of the given experiment \r\n//         in the given study \r\n// Action: a GET request to get the output. \r\nexport const getExpt = (which_db, study_name, expt_name) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + '/info/' + 'studyName-' + study_name;\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const experiments = res.data.experiments;\r\n      var thisExpt = {};\r\n      experiments.forEach(element => {\r\n        if (element.exptName == expt_name) {\r\n          thisExpt = element;\r\n        }\r\n      });\r\n      dispatch({\r\n        type: GET_EXPT,\r\n        payload: thisExpt\r\n      })\r\n    })\r\n}\r\n\r\n// Input: participant ID\r\n// Output: participant ID\r\n// Action: puts participant ID into redux store so that it's easily accessible \r\n//         for all components \r\nexport const storePartID = (part_id) => dispatch => {\r\n  dispatch({\r\n    type: PART_ID,\r\n    payload: part_id\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a collection, JSON object containing \r\n//        user responses\r\n// Output: NONE\r\n// Action: a POST request to send user response to the appropriate collection \r\n//         in Mongo database. \r\nexport const sendExpt = (which_db, which_col, dataToPOST) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + \"/\" + which_col;\r\n  axios\r\n    .post(API_URL, dataToPOST)\r\n    .then(res => {\r\n      // console.log(res);\r\n    })\r\n}\r\n\r\n// Input: an array representing questions keys of an experiment\r\n// Output: the same array\r\n// Action: puts the array into redux store so that it's easily accessible for \r\n//         all components\r\nexport const storeQKeys = (keys) => dispatch => {\r\n  dispatch({\r\n    type: Q_KEYS,\r\n    payload: keys\r\n  })\r\n}\r\n\r\n// Input: a number representing the index of the questions keys array. \r\n//        This number tells Experiment.js what to display next\r\n// Output: the same number\r\n// Action: puts the number into redux store so that it's easily accessible \r\n//         for all components\r\nexport const setNumQ = (num) => dispatch => {\r\n  dispatch({\r\n    type: NUM_Q,\r\n    payload: num\r\n  })\r\n}\r\n\r\n// Input: a boolean indicating whether the next question to display is the \r\n//        last question. This boolean determines which type of <button> to show\r\n// Output: the same boolean\r\n// Action: puts the boolean into redux store so that it's easily accessible \r\n//         for all components\r\nexport const isFinalQ = (is) => dispatch => {\r\n  dispatch({\r\n    type: FINAL_Q,\r\n    payload: is\r\n  })\r\n}\r\n\r\n// Input: a string representing a question, any representing an answer\r\n// Output: a JSON object containing the inputs\r\n// Action: puts the object into redux store. Notice the redux reducer \r\n//         appends the answer to the existing state. In this way, ```Success.js``` can send all stored answers via API at the end of the experiment. \r\nexport const storeAnswer = (question, answer) => dispatch => {\r\n  dispatch({\r\n    type: ANSWER,\r\n    payload: {\r\n      que: question,\r\n      ans: answer\r\n    }\r\n  })\r\n}\r\n\r\n// ###DEPRECATED###\r\n// Reason: there's a lag in receiving the output, which causes errors when \r\n//         displaying experiment items. \r\n// Input: name of a database, name of an uploaded file whose content is a \r\n//        JSON object containing experiment item data\r\n// Output: the content of the file\r\n// Action: puts the output into redux store so that it's easily accessible \r\n//         for all components.\r\nexport const getItemData = (which_database, fileName) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_database + \"/itemData\";\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const fileContent = res.data.filter(doc => doc.fileName == fileName)[0].fileContent\r\n      dispatch({\r\n        type: ITEM_DATA,\r\n        payload: fileContent\r\n      })\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  setNumQ,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\nclass EnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      console.log(allKeys);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    // console.log(questionKeys);\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(0);\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Note: once you click \"Ok\" for one question, you won't be\r\n        able to change your response. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, setNumQ, isFinalQ }\r\n)(EnterID);\r\n","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>This is the home page</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\n// This component does the following:\r\n// - Display question\r\n// - Display an experiment item (in this case, a slider)\r\n// - Store answer into Redux store upon submission \r\nclass Slider extends Component {\r\n  constructor() {\r\n    // putting super() here so that we can use this.blahblah\r\n    super();\r\n    this.state = this.initialState;\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.showSlider = this.showSlider.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      value: 0\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showSlider() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.question} <br/>\r\n        <input \r\n          type=\"range\"\r\n          min={this.props.lowRange}\r\n          max={this.props.highRange}\r\n          name=\"value\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n        {this.state.value} <br/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.question;\r\n    const sliderCSVKey = this.props.sliderCSVKey;\r\n    // put answer in our redux store to be sent via API later\r\n    this.props.storeAnswer(sliderCSVKey, this.state.value);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.showSlider()} <br/>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question will be \r\n              recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Slider);","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt\r\n} from \"../actions/dataActions\";\r\n\r\nclass StaticText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.initialState;\r\n    \r\n    // ###TODO###: change the name of the following binding if you see fit\r\n    // this binds the state to the showItem function below\r\n    this.showItem = this.showItem.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  // additional setup to communicate with Experiment.js\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  // additional setup to communicate with Experiment.js\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  // get experiment data from the database \r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  // ###TODO###: add your own function(s) to show experiment item(s)\r\n  showItem() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.text}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSubmit() {\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  // please render anything else you see fit\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.showItem()} <br/><br/>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n// Listing required functions / data\r\nStaticText.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\n// mapping Redux state to props that we can use in our component\r\n// expt contains all info from a given experiment \r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\n// connecting props to our component\r\n// export our component so that Experiment.js can use it \r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt }\r\n)(StaticText);","import React, { Component } from 'react';\r\nimport './NormalCurve.css';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nclass NormalCurve extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.sliderRef = React.createRef();\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n\r\n    this.dotReturn = this.dotReturn.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.triMouseDown = this.triMouseDown.bind(this);\r\n    this.triDrag = this.triDrag.bind(this);\r\n    this.triUp = this.triUp.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  get initialState() {\r\n    const unitHeight = this.props.data[\"max-height\"];\r\n    const circRad = this.props.data[\"circle-radius\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n    const ceilDist = height - 50;\r\n    const length = Math.ceil((distancing * this.props.data[\"len1\"] * 2 + \r\n      distancing * this.props.data[\"len2\"] * 2) / 100) * 100;\r\n    const colNum = Math.round(length / distancing);\r\n    // console.log(height, distancing, ceilDist, colNum);\r\n    return {\r\n      submitted: false,      \r\n      x: 0, y: 0, isDown: false,\r\n      rectX: 12.5,\r\n      down: false,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      svgX: 6,\r\n      len1: this.props.data[\"len1\"],\r\n      colValHeiS: this.props.data[\"colValHeiS\"],\r\n      len2: this.props.data[\"len2\"],\r\n      colValHeiS2: this.props.data[\"colValHeiS2\"],\r\n      distancing: distancing,\r\n      distancing1: (this.props.data[\"len2\"] + 1) * distancing,\r\n      distancing2: \r\n        (this.props.data[\"len1\"] + this.props.data[\"len2\"] + 4) * distancing,\r\n      triCent1: \r\n        Math.round((0.5 * this.props.data[\"len1\"]) * distancing) + distancing,\r\n      triCent2: \r\n        Math.round((0.5 * this.props.data[\"len2\"]) * distancing) + distancing,\r\n      mousePointerRange: 0,\r\n      triDown: false,\r\n      col11: this.props.data[\"len2\"] + 1,\r\n      col12: this.props.data[\"len1\"] + this.props.data[\"len2\"] + 1,\r\n      col21: this.props.data[\"len1\"] + this.props.data[\"len2\"] + 3,\r\n      col22: this.props.data[\"len1\"] + 2 * this.props.data[\"len2\"] + 3,\r\n      colLim1: Math.round((length - (this.props.data[\"len1\"] * distancing)) / \r\n        distancing),\r\n      colLim2: Math.round((length - (this.props.data[\"len2\"] * distancing)) / \r\n        distancing),\r\n      overlapVals: this.props.data[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  // add user x positions in here\r\n  onSubmit() {\r\n    const question = this.props.questionNCKey;\r\n    const key1 = this.props.graph1legend;\r\n    const key2 = this.props.graph2legend;\r\n    const answer = {\r\n      [key1]: this.state.col11,\r\n      [key2]: this.state.col21,\r\n      area: this.state.overlapVals[\r\n        Math.abs(this.state.col22 - this.state.col11)\r\n      ]\r\n    }\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  dotReturn(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n    if (xPos > 7) {\r\n      xPos = 15 - xPos;\r\n    }\r\n    const CX = this.state.distancing1 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n    var hard = <circle \r\n      className=\"icon\" stroke=\"DarkCyan\" fill=\"DarkCyan\" fillOpacity=\"0.3\" \r\n      strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n    return hard;\r\n  }\r\n\r\n  dotReturn2(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n    if (xPos > 7) {\r\n      xPos = 15 - xPos;\r\n    }\r\n    const CX = this.state.distancing2 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n    var hard = <circle \r\n      className=\"icon\" stroke=\"Crimson\" fill=\"Crimson\" fillOpacity=\"0.3\" \r\n      strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n    return hard;\r\n  }\r\n\r\n  triMouseDown(e, num) {\r\n    if (e.type === \"mousedown\") {\r\n      // console.log(\"MOUSEDOWN\");\r\n      e.preventDefault();\r\n      var svgPre = this.svgRef.current;\r\n      // Set mousePointerRange so that we know the distance from the mouse \r\n      // tip to the x-value of the triangle tip\r\n      var ptPre = svgPre.createSVGPoint();\r\n      ptPre.x = e.clientX;\r\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n      if (num === 1) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - \r\n            svgPPre.x\r\n        }));\r\n      }\r\n      else if (num === 2) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - \r\n            svgPPre.x\r\n        }));\r\n      }\r\n      // console.log(this.state);\r\n    }\r\n  }\r\n\r\n  triDrag(e) {\r\n    // Set mousePointerRange so that we know the distance from the mouse \r\n    // tip to the x-value of the triangle tip\r\n    var svgPre = this.svgRef.current;\r\n    var ptPre = svgPre.createSVGPoint();\r\n    ptPre.x = e.clientX;\r\n    var svgPPree = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n    this.setState({ x: e.screenX, y: e.screenY, svgX: svgPPree.x });\r\n    if (this.state.triDown === 2) {\r\n      // console.log(\"DRAG CONT'D\");\r\n      var svg = this.svgRef.current;\r\n      var pt = svg.createSVGPoint();\r\n      pt.x = e.clientX;\r\n      var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n      e.preventDefault();\r\n      var x = svgP.x - this.state.triCent2 + this.state.mousePointerRange;\r\n      var col = Math.round((x - 6) / this.state.distancing);\r\n      if (col < 0) {\r\n        this.setState({ distancing2: 0, col21: 0, col22: this.state.len2 - 1 });\r\n      }\r\n      else if (col > this.state.colLim2) {\r\n        this.setState({ distancing2: this.state.distancing * this.state.colLim2, \r\n          col21: this.state.colLim2, col22: this.state.colLim2 + \r\n          this.state.len2 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing2: this.state.distancing * col, col21: col, \r\n          col22: col + this.state.len2 - 1 });\r\n      }\r\n      this.curveArea(col);\r\n      // this.setState({ distancing2 : x })\r\n    }\r\n    else if (this.state.triDown === 1) {\r\n      // console.log(\"DRAG CONT'D\");\r\n      var svg = this.svgRef.current;\r\n      var pt = svg.createSVGPoint();\r\n      pt.x = e.clientX;\r\n      var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n      e.preventDefault();\r\n      var x = svgP.x - this.state.triCent1 + this.state.mousePointerRange;\r\n      var col = Math.round((x - 6) / this.state.distancing);\r\n      if (col < 0) {\r\n        this.setState({ distancing1: 0, col11: 0, col12: this.state.len1 - 1 });\r\n      }\r\n      else if (col > this.state.colLim1) {\r\n        this.setState({ distancing1: this.state.distancing * this.state.colLim1, \r\n          col11: this.state.colLim1, col2: this.state.colLim1 + \r\n          this.state.len1 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing1: this.state.distancing * col, col11: col, \r\n          col12: col + this.state.len1 - 1 });\r\n      }\r\n      this.curveArea(col);\r\n      // this.setState({ distancing2 : x })\r\n    }\r\n  }\r\n\r\n  triUp(e) {\r\n    // console.log(\"UP\");\r\n    if (this.state.triDown) {\r\n      this.setState({ triDown: false });\r\n    }\r\n  }\r\n\r\n  curveArea(col) {\r\n    if (this.state.col11 > this.state.col22 || \r\n        this.state.col12 < this.state.col21) {\r\n      this.areaRef.current.innerHTML = 0;\r\n    }\r\n    else {\r\n      this.areaRef.current.innerHTML = \r\n        this.state.overlapVals[Math.abs(this.state.col22 - this.state.col11)];\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onMouseMove={e => this.triDrag(e)} onMouseUp={e => this.triUp(e)}>\r\n        <div className=\"container\">\r\n          <h3>Question: {this.props.questionNC}</h3>\r\n        </div> \r\n        <svg width={this.state.svgWidth} height={this.state.svgHeight} \r\n          ref={this.svgRef}>\r\n          <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" />\r\n          {[...Array(this.state.len1).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS[col]).keys()].map(\r\n                (row) => this.dotReturn(col, row)\r\n              )\r\n          )}\r\n          {[...Array(this.state.len2).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS2[col]).keys()].map(\r\n                (row) => this.dotReturn2(col, row)\r\n              )\r\n          )}\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent1 + this.state.distancing1 - 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1 + 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1, \r\n                  this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\r\n          />\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent2 + this.state.distancing2 - 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2 + 5, \r\n                  this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2, \r\n                  this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\r\n          />\r\n          Sorry, please use a different browser.\r\n        </svg>\r\n        <br />\r\n        <div class=\"boxed\">\r\n          <div class=\"color-box\" style={{ backgroundColor: \"DarkCyan\" }}></div>\r\n          {this.props.graph1}\r\n          <br />\r\n          <div class=\"color-box\" style={{ backgroundColor: \"Crimson\" }}></div>\r\n          {this.props.graph2}\r\n        </div>\r\n        <br />\r\n        <h4>Area Under Curve: <span ref={this.areaRef}></span> | \r\n          First x-coordinate: {this.state.col11} | \r\n          Second x-coordinate: {this.state.col21} </h4>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNormalCurve.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(NormalCurve);","import React, { Component } from 'react';\r\nimport './NormalCurve.css';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nclass NormalCurveSurvey extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.sliderRef = React.createRef();\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n    this.lengthRef = React.createRef();\r\n    this.startPos1Ref = React.createRef();\r\n    this.startPos2Ref = React.createRef();\r\n\r\n    this.dotReturn = this.dotReturn.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.triMouseDown = this.triMouseDown.bind(this);\r\n    this.triDrag = this.triDrag.bind(this);\r\n    this.triUp = this.triUp.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  get initialState() {\r\n    const unitHeight = this.props.data[\"max-height\"];\r\n    const circRad = this.props.data[\"circle-radius\"];\r\n    const len1 = this.props.data[\"len1\"];\r\n    const len2 = this.props.data[\"len2\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n\r\n    const colNumInit = this.props.data[\"axis-length\"];\r\n    const internalLength = colNumInit * distancing;\r\n    const edgeCol = Math.ceil(Math.max(len1, len2) / 2);\r\n    const edgeLength = Math.max(len1, len2) * distancing;\r\n\r\n    const ceilDist = height - 50;\r\n    // const length = Math.ceil((distancing * this.props.data[\"len1\"] * 2 + distancing * this.props.data[\"len2\"] * 2) / 100) * 100;\r\n    const length = edgeLength + internalLength;\r\n    console.log(length);\r\n    const colNum = Math.ceil(length / distancing);\r\n    console.log(height, distancing, ceilDist, colNum);\r\n\r\n    const axisStart = Math.ceil(edgeLength / 2);\r\n    const axisStartCol = edgeCol;\r\n    const axisWidth = length - ((len1 / 2 + 1) * distancing + (len2 / 2 + 1) * distancing - 1);\r\n    const axisEndCol = internalLength / distancing;\r\n    const axisEnd = axisEndCol * distancing;\r\n\r\n    const triCent1 = (0.5 * len1 + 1) * distancing;\r\n    const triCent2 = (0.5 * len2 + 1) * distancing;\r\n    const triCentCol1 = Math.ceil(triCent1 / distancing);\r\n    const triCentCol2 = Math.ceil(triCent2 / distancing);\r\n    const triDist1 = triCentCol1 * distancing - triCent1;\r\n    const triDist2 = triCentCol2 * distancing - triCent2;\r\n\r\n    const variance1 = Math.abs(Math.ceil(len1 / 2) - axisStartCol);\r\n    const variance2 = Math.abs(Math.ceil(len2 / 2) - axisStartCol);\r\n\r\n    const startPos1 = this.props.data[\"startPos1\"];\r\n    let distancing1 = startPos1 + variance1 - 1;\r\n    let col11 = startPos1;\r\n    let col12 = startPos1 + len1 - 1;\r\n    if (col11 + triCentCol1 < axisStartCol) {\r\n      distancing1 = variance1 - 1;\r\n      col11 = 0;\r\n      col12 = len1 - 1;\r\n    }\r\n    else if (col11 + triCentCol1 > axisStartCol + axisEndCol) {\r\n      distancing1 = variance1 + axisEndCol - 1;\r\n      col11 = axisEndCol;\r\n      col12 = axisEndCol + len1 - 1;\r\n    }\r\n\r\n    let startPos2 = this.props.data[\"startPos2\"];\r\n    let distancing2 = startPos2 + variance2 - 1;\r\n    let col21 = startPos2;\r\n    let col22 = startPos2 + len2 - 1;\r\n    if (col21 + triCentCol2 < axisStartCol) {\r\n      distancing2 = variance2 - 1;\r\n      col21 = 0;\r\n      col22 = len2 - 1;\r\n    }\r\n    else if (col21 + triCentCol2 > axisStartCol + axisEndCol) {\r\n      distancing2 = variance2 + axisEndCol - 1;\r\n      col21 = axisEndCol;\r\n      col22 = axisEndCol + len2 - 1;\r\n    }\r\n\r\n    return {\r\n      submitted: false,\r\n      x: 0, y: 0, isDown: false,\r\n      rectX: 12.5,\r\n      down: false,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      svgX: 6,\r\n      len1: len1,\r\n      colValHeiS: this.props.data[\"colValHeiS\"],\r\n      len2: len2,\r\n      colValHeiS2: this.props.data[\"colValHeiS2\"],\r\n      distancing: distancing,\r\n      distancing1: distancing1 * distancing,\r\n      distancing2: distancing2 * distancing,\r\n      triCent1: triCent1,\r\n      triCentCol1: triCentCol1,\r\n      triCent2: triCent2,\r\n      triCentCol2: triCentCol2,\r\n      mousePointerRange: 0,\r\n      triDown: false,\r\n      col11: col11,\r\n      col12: col12,\r\n      col21: col21,\r\n      col22: col22,\r\n      colLim1: Math.round((length - (len1 * distancing)) / distancing),\r\n      colLim2: Math.round((length - (len2 * distancing)) / distancing),\r\n      overlapVals: this.props.data[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist,\r\n      axisStart: axisStart,\r\n      axisStartCol: axisStartCol,\r\n      axisWidth: axisWidth,\r\n      axisEnd: axisEnd,\r\n      axisEndCol: axisEndCol,\r\n      edgeCol: edgeCol,\r\n      edgeLength: edgeLength,\r\n      colNum: colNumInit,\r\n      variance1: variance1,\r\n      variance2: variance2,\r\n      lowVal: this.props.data[\"lowVal\"],\r\n      showCoors: true\r\n      // key1: key1,\r\n      // key2: key2\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.questionNCKey;\r\n    const key1 = this.props.graph1legend;\r\n    const key2 = this.props.graph2legend;\r\n    const answer = {\r\n      [key1]: this.state.col11,\r\n      [key2]: this.state.col21,\r\n      area: this.state.overlapVals[\r\n        Math.abs(this.state.col22 - this.state.col11)\r\n      ]\r\n    }\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  dotReturn(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing1 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = <circle className=\"icon\" stroke=\"DarkCyan\" fill=\"DarkCyan\" fillOpacity=\"0.3\" strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n\r\n    return hard;\r\n  }\r\n\r\n  dotReturn2(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing2 + this.state.distancing * xPosOrig + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = <circle className=\"icon\" stroke=\"Crimson\" fill=\"Crimson\" fillOpacity=\"0.3\" strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}></circle>;\r\n\r\n    return hard;\r\n  }\r\n\r\n  svgColReturn(e, dragger) {\r\n    let distFromCent;\r\n    let variance;\r\n    if (dragger === 1) {\r\n      distFromCent = this.state.triCentCol1;\r\n      variance = this.state.variance1;\r\n    }\r\n    else if (dragger === 2) {\r\n      distFromCent = this.state.triCentCol2;\r\n      variance = this.state.variance2;\r\n    }\r\n    var svg = this.svgRef.current;\r\n    var pt = svg.createSVGPoint();\r\n    pt.x = e.clientX;\r\n    var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n    e.preventDefault();\r\n    var x = svgP.x - distFromCent + this.state.mousePointerRange;\r\n    var col = Math.round((x - this.state.axisStart) / this.state.distancing) + variance;\r\n    var colRelative = Math.round((x - this.state.axisStart) / this.state.distancing) + 1;\r\n    // console.log(col, colRelative, variance);\r\n    return [col, colRelative];\r\n  }\r\n\r\n  svgColPlacement(col, colRelative, dragger) {\r\n    if (dragger === 2) {\r\n      if (col + this.state.triCentCol2 < this.state.axisStartCol) {\r\n        this.setState({ distancing2: (this.state.variance2 - 1) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\r\n      }\r\n      else if (col + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\r\n        this.setState({ distancing2: this.state.distancing * (this.state.variance2 + this.state.axisEndCol - 1), col21: this.state.axisEndCol, col22: this.state.axisEndCol + this.state.len2 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing2: this.state.distancing * col, col21: colRelative, col22: colRelative + this.state.len2 - 1 });\r\n      }\r\n      this.curveArea();\r\n    }\r\n    else if (dragger === 1) {\r\n      if (col + this.state.triCentCol1 < this.state.axisStartCol) {\r\n        this.setState({ distancing1: (this.state.variance1 - 1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\r\n      }\r\n      else if (col + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n        this.setState({ distancing1: this.state.distancing * (this.state.variance1 + this.state.axisEndCol - 1), col11: this.state.axisEndCol, col12: this.state.axisEndCol + this.state.len1 - 1 })\r\n      }\r\n      else {\r\n        this.setState({ distancing1: this.state.distancing * col, col11: colRelative, col12: colRelative + this.state.len1 - 1 });\r\n      }\r\n      this.curveArea();\r\n      // this.setState({ distancing2 : x })\r\n    }\r\n  }\r\n\r\n  triMouseDown(e, num) {\r\n    if (e.type === \"mousedown\") {\r\n      // console.log(\"MOUSEDOWN\");\r\n      e.preventDefault();\r\n      var svgPre = this.svgRef.current;\r\n      // Set mousePointerRange so that we know the distance\r\n      // from the mouse tip to the x-value of the triangle\r\n      // tip\r\n      var ptPre = svgPre.createSVGPoint();\r\n      ptPre.x = e.clientX;\r\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n      if (num === 1) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - svgPPre.x\r\n        }));\r\n      }\r\n      else if (num === 2) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - svgPPre.x\r\n        }));\r\n      }\r\n      // console.log(this.state);\r\n    }\r\n  }\r\n\r\n  triDrag(e) {\r\n    e.preventDefault();\r\n    var dragger = this.state.triDown;\r\n    var cols = this.svgColReturn(e, dragger);\r\n    var col = cols[0];\r\n    var colRelative = cols[1]\r\n    // console.log(col);\r\n    this.svgColPlacement(col, colRelative, dragger);\r\n    this.curveArea();\r\n  }\r\n\r\n  triUp(e) {\r\n    // console.log(\"UP\");\r\n    if (this.state.triDown) {\r\n      this.setState({ triDown: false });\r\n    }\r\n  }\r\n\r\n  curveArea() {\r\n    const col11 = this.state.col11 + this.state.variance1;\r\n    const col12 = this.state.col12 + this.state.variance1;\r\n    const col21 = this.state.col21 + this.state.variance2;\r\n    const col22 = this.state.col22 + this.state.variance2;\r\n\r\n    if (col11 > col22 || col12 < col21) {\r\n      this.areaRef.current.innerHTML = 0;\r\n    }\r\n    else {\r\n      // console.log(this.state.col22, this.state.col11, Math.abs(this.state.col22 - this.state.col11));\r\n      this.areaRef.current.innerHTML = this.state.overlapVals[Math.abs(col22 - col11)];\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onMouseMove={e => this.triDrag(e)}\r\n        onMouseUp={e => this.triUp(e)}>\r\n        <div className=\"container\">\r\n          <h3>Question: {this.props.questionNC}</h3>\r\n        </div> \r\n        <svg width={this.state.svgWidth} height={this.state.svgHeight + 10} ref={this.svgRef}>\r\n          {/* <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" fill=\"red\"/> */}\r\n          {[...Array(this.state.len1).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS[col]).keys()].map(\r\n                (row) => this.dotReturn(col, row)\r\n              )\r\n          )}\r\n          {[...Array(this.state.len2).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS2[col]).keys()].map(\r\n                (row) => this.dotReturn2(col, row)\r\n              )\r\n          )}\r\n          {/* <rect width={this.state.cursorWidth} fill=\"#000\" x={this.state.rectX} y=\"5\" height=\"150\"\r\n                    onMouseDown={e => this.dragMouseDown(e)}\r\n                    \r\n                    // onMouseMove={e => this.elementDrag(e)}\r\n                    ref={this.rectRef}\r\n                    ></rect> */}\r\n          <rect width={this.state.axisEnd}\r\n            height=\"2\"\r\n            fill=\"black\"\r\n            x={this.state.axisStart - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          <rect width=\"2\"\r\n            height=\"20\"\r\n            fill=\"black\"\r\n            x={this.state.axisStart - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          <rect width=\"2\"\r\n            height=\"20\"\r\n            fill=\"black\"\r\n            x={this.state.axisEnd + this.state.axisStart - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent1 + this.state.distancing1 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\r\n          />\r\n          <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent2 + this.state.distancing2 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\r\n          />\r\n          <text text-anchor=\"middle\" x={this.state.axisStart} y={this.state.ceilDist + 55}>{this.state.lowVal}</text>\r\n          <text text-anchor=\"middle\" x={this.state.axisStart + this.state.axisEnd} y={this.state.ceilDist + 55}>{this.state.lowVal + this.state.colNum}</text>\r\n                    Sorry, please use a different browser.\r\n                </svg>\r\n        <br />\r\n        <div class=\"boxed\">\r\n          <div class=\"color-box\" style={{ backgroundColor: \"DarkCyan\" }}></div>\r\n          {this.props.graph1}\r\n          <br />\r\n          <div class=\"color-box\" style={{ backgroundColor: \"Crimson\" }}></div>\r\n          {this.props.graph2}\r\n        </div>\r\n        <br />\r\n        <h4>Area Under Curve: <span ref={this.areaRef}></span> | First x-coordinate: {this.state.col11} | Second x-coordinate: {this.state.col21} </h4>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"OK\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNormalCurveSurvey.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(NormalCurveSurvey);","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport './HistSlider.css';\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nclass Histogram extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.sliderRef = React.createRef();\r\n    this.graphRef = React.createRef();\r\n    this.qRef = React.createRef();\r\n    this.minRef = React.createRef();\r\n    this.maxRef = React.createRef();\r\n\r\n    this.state = this.initialState;\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      checked: false,\r\n      minVal: Number,\r\n      maxVal: Number,\r\n      sliderPos: Number\r\n    }\r\n  }\r\n\r\n    resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n    this.drawChart();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.questionHistKey;\r\n    const answer = this.state.sliderPos;\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  drawChart() {\r\n    const data = this.props.histData.data;\r\n\r\n    const svg = d3.select(this.graphRef.current).append(\"svg\")\r\n      .attr(\"width\", this.props.histData.width)\r\n      .attr(\"height\", this.props.histData.height)\r\n\r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * this.props.histData.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.histData.height - 10 * d)\r\n      .attr(\"width\", this.props.histData.width / data.length - 10)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"opacity\", 0.5)\r\n\r\n    svg.selectAll(\"text\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d)\r\n      .attr(\"x\", (d, i) => i * this.props.histData.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.histData.height - (10 * d) - 3)\r\n  }\r\n\r\n  render() {\r\n    const vertAlign = this.props.histData.height / 2;\r\n    // const step_size = this.props.width / this.props.data.length;\r\n    return (\r\n      <div>\r\n        <b>Question: </b> <br/>\r\n        {this.props.questionHist}\r\n        <div ref={this.graphRef}\r\n          style={{ \r\n            position: \"relative\", \r\n            width: this.props.histData.width, \r\n            margin: \"auto\" }}>\r\n          <div \r\n            style={{ \r\n              position: \"absolute\",\r\n              top: vertAlign}}>\r\n            <input type=\"range\" min={this.props.histLowRange} max={this.props.histHighRange} \r\n              className=\"hist-slider\" onChange={this.onChange}\r\n              name=\"sliderPos\" value={this.state.sliderPos}\r\n              step={this.props.histData.step} ref={this.sliderRef}\r\n              style={{ width: this.props.histData.width }}/>\r\n          </div>\r\n        </div>\r\n        {this.props.histLowRange}\r\n        <input type=\"range\" class=\"dummy-slider\" \r\n          style={{ width: this.props.histData.width }} onChange={this.onChange}\r\n          name=\"sliderPos\" value={this.state.sliderPos} \r\n          step={this.props.histData.step}\r\n          min={this.props.histLowRange} max={this.props.histHighRange} />\r\n        {this.props.histHighRange}\r\n        <br/>\r\n        Slider Position: {this.state.sliderPos}\r\n        \r\n        <br/><br/>\r\n          {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nHistogram.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Histogram);","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  sendExpt,\r\n  setNumQ,\r\n  isFinalQ\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\";\r\nimport StaticText from \"../items/StaticText\";\r\nimport NormalCurve from \"../items/NormalCurve.jsx\";\r\nimport NormalCurveSurvey from \"../items/NormalCurveSurvey\";\r\nimport Histogram from \"../items/Histogram\";\r\n\r\nclass Experiment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      whichItem: \"\"\r\n    }\r\n\r\n    this.onNextQuestion = this.onNextQuestion.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/expt/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  // method to push user to the next question \r\n  nextQuestion() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    const nextQ = this.props.expt.questionKeys[this.props.expt.numQ + 1];\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    if (nextQ == lastQ) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(this.props.expt.numQ + 1);\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + expt + \r\n      \"/\" + nextQ.toString());\r\n  }\r\n\r\n  // will be triggered when the next question is not the final question\r\n  onNextQuestion() {\r\n    // ###TODO###: add more if statements below that follow the templates \r\n    if (this.childSlider) {\r\n      this.childSlider.resetState();\r\n      this.nextQuestion();\r\n    };\r\n    if (this.childNormalCurve) {\r\n      this.childNormalCurve.resetState();\r\n      this.nextQuestion();\r\n    }; \r\n    if (this.childStaticText) {\r\n      this.nextQuestion();\r\n    };\r\n  }\r\n\r\n  // will be triggered when the next question is the final question \r\n  onFinalSubmit() {\r\n    this.props.history.push(\"/success\");\r\n  }\r\n\r\n  // decides which button to show for the next question based whether the next\r\n  // question is the final question of the experiment\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <div>\r\n            Please click \"OK\" above before clicking \"Next Question\" <br/>\r\n            <input type=\"submit\" className=\"btn\" value=\"Next Question\"\r\n              onClick={this.onNextQuestion}/>\r\n          </div> :\r\n          <div>\r\n            Please click \"OK\" above before clicking \"Submit\" <br/>\r\n            This is the final question. <p></p>\r\n            <input type=\"submit\" className=\"btn\" value=\"Submit\"\r\n              onClick={this.onFinalSubmit}/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    if (expt[key]) {\r\n      // ###TODO### add more if statements here for your experiment type\r\n      // follow the following format\r\n      // ATTENTION: do NOT call methods (especially those associated with API)\r\n      // inside these cases. React keeps rendering displayExpt(), which means\r\n      // your method(s) will be called repeatedly => not good. \r\n      switch(expt[key][\"Type\"]) {\r\n        case \"slider\":\r\n          const lowRange = expt[key][\"lowRange\"];\r\n          const highRange = expt[key][\"highRange\"];\r\n          const question = expt[key][\"Question\"];\r\n          const sliderCSVKey = expt[key][\"slider-key\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Slider childRef={ref => (this.childSlider = ref)}\r\n                question={question} sliderCSVKey={sliderCSVKey}\r\n                lowRange={lowRange} highRange={highRange} />\r\n              <br/>\r\n              {/* keep the following line */}\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n          break;\r\n        case \"static-text\":\r\n          const text = expt[key][\"Static Text\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <StaticText childRef={ref => (this.childStaticText = ref)}\r\n                text={text}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"normal-curve\":\r\n          const questionNC = expt[key][\"Question\"];\r\n          const graph1 = expt[key][\"graph1key\"];\r\n          const graph2 = expt[key][\"graph2key\"];\r\n          const questionNCKey = expt[key][\"normal-curve-question-key\"];\r\n          const graph1legend = expt[key][\"normal-curve-legend-key1\"];\r\n          const graph2legend = expt[key][\"normal-curve-legend-key2\"];\r\n          const dataFileName = expt[key][\"FileName\"];\r\n          const dataFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <NormalCurveSurvey childRef={ref => (this.childNormalCurve = ref)} \r\n                questionNC={questionNC} graph1={graph1} graph2={graph2} \r\n                questionNCKey={questionNCKey} \r\n                graph1legend={graph1legend}\r\n                graph2legend={graph2legend}\r\n                fileName={dataFileName} data={dataFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"threshold\":\r\n          const questionHist = expt[key][\"Question\"];\r\n          const questionHistKey = expt[key][\"threshold-key\"];\r\n          const histLowRange = expt[key][\"lowRange\"];\r\n          const histHighRange = expt[key][\"highRange\"];\r\n          const histFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Histogram childRef={ref => (this.childHistogram = ref)} \r\n                questionHist={questionHist} \r\n                questionHistKey={questionHistKey}\r\n                histLowRange={histLowRange}\r\n                histHighRange={histHighRange} histData={histFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        default: \r\n          return (<div>Unknown Experiment Type</div>)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nExperiment.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  sendExpt: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, sendExpt, setNumQ, isFinalQ }\r\n)(Experiment);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  sendExpt\r\n} from \"../actions/dataActions\"\r\n\r\nclass Success extends Component {\r\n  componentDidMount() {\r\n    // console.log(this.props);\r\n    const username = this.props.expt.dbInfo.db;\r\n    const expt = this.props.expt.dbInfo.col;\r\n    // console.log(this.props.expt.exptToDisplay);\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      finalObj[\"condition\"] = this.props.expt.exptToDisplay.condition;\r\n      // console.log(finalObj);\r\n      this.props.sendExpt(username, expt, finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const link = this.props.expt.exptToDisplay.link;\r\n    const participantID = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1> <br/>\r\n        You are <b>67%</b> done with the experiment! Now you will need to:  <br/><br/>\r\n        1. Please copy your ID shown below: <br/>\r\n        <b>{participantID}</b> <br/> \r\n        2. Please click on this <a href={link} target=\"_blank\">link</a>, paste your ID in the first page and complete the final survey. \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSuccess.propTypes = {\r\n  sendExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { sendExpt }\r\n)(Success);\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  setNumQ,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\nclass PreviewEnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      console.log(allKeys);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    // console.log(questionKeys);\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(0);\r\n    this.props.history.push(\"/preview/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Hi Researchers! You may enter any ID to preview your experiment. <br/>\r\n        Note: experiment preview will <b>NOT</b> record any data. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nPreviewEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, setNumQ, isFinalQ }\r\n)(PreviewEnterID);\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  setNumQ,\r\n  isFinalQ\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\";\r\nimport StaticText from \"../items/StaticText\";\r\nimport NormalCurve from \"../items/NormalCurve.jsx\";\r\n\r\nclass PreviewExpt extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      whichItem: \"\"\r\n    }\r\n\r\n    this.onNextQuestion = this.onNextQuestion.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/preview/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  // method to push user to the next question \r\n  nextQuestion() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    const nextQ = this.props.expt.questionKeys[this.props.expt.numQ + 1];\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    if (nextQ == lastQ) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(this.props.expt.numQ + 1);\r\n    this.props.history.push(\"/preview/\" + username + \"/\" + expt + \r\n      \"/\" + nextQ.toString());\r\n  }\r\n\r\n  // will be triggered when the next question is not the final question\r\n  onNextQuestion() {\r\n    // ###TODO###: add more if statements below that follow the templates \r\n    if (this.childSlider) {\r\n      this.childSlider.resetState();\r\n      this.nextQuestion();\r\n    };\r\n    if (this.childNormalCurve) {\r\n      this.childNormalCurve.resetState();\r\n      this.nextQuestion();\r\n    }; \r\n    if (this.childStaticText) {\r\n      this.nextQuestion();\r\n    };\r\n  }\r\n\r\n  // will be triggered when the next question is the final question \r\n  onFinalSubmit() {\r\n    this.props.history.push(\"/previewSuccess\");\r\n  }\r\n\r\n  // decides which button to show for the next question based whether the next\r\n  // question is the final question of the experiment\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <div>\r\n            Please click \"OK\" above before clicking \"Next Question\" <br/>\r\n            <input type=\"submit\" className=\"btn\" value=\"Next Question\"\r\n              onClick={this.onNextQuestion}/>\r\n          </div> :\r\n          <div>\r\n            Please click \"OK\" above before clicking \"Submit\" <br/>\r\n            This is the final question. <p></p>\r\n            <input type=\"submit\" className=\"btn\" value=\"Submit\"\r\n              onClick={this.onFinalSubmit}/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    if (expt[key]) {\r\n      // ###TODO### add more if statements here for your experiment type\r\n      // follow the following format\r\n      // ATTENTION: do NOT call methods (especially those associated with API)\r\n      // inside these cases. React keeps rendering displayExpt(), which means\r\n      // your method(s) will be called repeatedly => not good. \r\n      switch(expt[key][\"Type\"]) {\r\n        case \"slider\":\r\n          const lowRange = expt[key][\"lowRange\"];\r\n          const highRange = expt[key][\"highRange\"];\r\n          const question = expt[key][\"Question\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Slider childRef={ref => (this.childSlider = ref)}\r\n                question={question} lowRange={lowRange} \r\n                highRange={highRange} />\r\n              <br/>\r\n              {/* keep the following line */}\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n          break;\r\n        case \"static-text\":\r\n          const text = expt[key][\"Static Text\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <StaticText childRef={ref => (this.childStaticText = ref)}\r\n                text={text}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"normal-curve\":\r\n          const questionNC = expt[key][\"Question\"];\r\n          const graph1 = expt[key][\"graph1key\"];\r\n          const graph2 = expt[key][\"graph2key\"];\r\n          const dataFileName = expt[key][\"FileName\"];\r\n          const dataFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <NormalCurve childRef={ref => (this.childNormalCurve = ref)} \r\n                questionNC={questionNC} graph1={graph1} graph2={graph2} \r\n                fileName={dataFileName} data={dataFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        default: \r\n          return (<div>Unknown Experiment Type</div>)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nPreviewExpt.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, setNumQ, isFinalQ }\r\n)(PreviewExpt);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass PreviewSuccess extends Component {\r\n  componentDidMount() {\r\n    // console.log(this.props);\r\n    const username = this.props.expt.dbInfo.db;\r\n    const expt = this.props.expt.dbInfo.col;\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      console.log(finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const link = this.props.expt.exptToDisplay.link;\r\n    const participantID = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1> <br/>\r\n        You are <b>67%</b> done with the experiment! Now you will need to:  <br/><br/>\r\n        1. Please copy your ID shown below: <br/>\r\n        <b>{participantID}</b> <br/> \r\n        2. Please click on this <a href={link} target=\"_blank\">link</a>, paste your ID in the first page and complete the final survey. \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPreviewSuccess.propTypes = {\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { }\r\n)(PreviewSuccess);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport EnterID from \"./components/EnterID\";\nimport HomePage from \"./components/HomePage\";\nimport Experiment from \"./components/Experiment\";\nimport Success from \"./components/Success\";\n\nimport PreviewEnterID from \"./components/PreviewEnterID\";\nimport PreviewExpt from \"./components/PreviewExpt\";\nimport PreviewSuccess from \"./components/PreviewSuccess\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/participant-app/\">\n        <div className=\"App\">\n          <Route exact path=\"/\" component={HomePage}/>\n\n          <Route exact path=\"/success\" component={Success}/>\n          <Route exact path=\"/expt/:username/:expt\" component={EnterID}/>\n          <Route exact path=\"/expt/:username/:expt/:qKey\" component={Experiment}/>\n\n          <Route exact path=\"/previewSuccess\" component={PreviewSuccess}/>\n          <Route exact path=\"/preview/:username/:expt\" component={PreviewEnterID}/>\n          <Route exact path=\"/preview/:username/:expt/:qKey\" component={PreviewExpt}/>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["reducers/dataReducer.js","reducers/index.js","actions/types.js","store.js","components/EnterID.js","actions/dataActions.js","components/HomePage.js","components/Experiment.js","App.js","serviceWorker.js","index.js"],"names":["initialState","exptToDisplay","participantID","combineReducers","expt","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","EnterID","props","ParticipantID","onChange","bind","showExpt","e","this","setState","target","name","value","storePartID","username","match","params","studyExpt","history","push","exptName","className","onClick","Component","connect","part_id","dispatch","HomePage","Experiment","onSubmit","getData","displayExpt","studyName","split","getExpt","Object","keys","filter","k","map","lowRange","highRange","question","min","max","finalData","API_URL","axios","post","then","res","console","log","alert","participant","which_db","study_name","expt_name","get","experiments","data","thisExpt","forEach","element","App","basename","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7c841f7.chunk.js","sourcesContent":["import {\r\n  GET_EXPT,\r\n  PART_ID\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  exptToDisplay: {},\r\n  participantID: ''\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_EXPT:\r\n      return {\r\n        ...state,\r\n        exptToDisplay: action.payload\r\n      };\r\n    case PART_ID:\r\n      return {\r\n        ...state,\r\n        participantID: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nexport default combineReducers({\r\n  expt: dataReducer\r\n});","export const GET_EXPT = \"GET_EXPT\";\r\nexport const PART_ID = \"PART_ID\";","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { storePartID } from \"../actions/dataActions\";\r\n\r\nclass EnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.history.push(\"/\" + username + \"/\" + studyExpt + \"/experiment\");\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/>\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nEnterID.propTypes = {\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storePartID }\r\n)(EnterID);\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_EXPT,\r\n  PART_ID\r\n} from \"./types\"\r\n\r\nexport const getExpt = (which_db, study_name, expt_name) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + '/info/' + 'studyName-' + study_name;\r\n  axios\r\n      .get(API_URL)\r\n      .then(res => {\r\n        const experiments = res.data.experiments;\r\n        var thisExpt = {};\r\n        experiments.forEach(element => {\r\n          if (element.exptName == expt_name) {\r\n            thisExpt = element;\r\n          }\r\n        });\r\n        dispatch({\r\n          type: GET_EXPT,\r\n          payload: thisExpt\r\n        })\r\n        console.log(\"dispatched\");\r\n      })\r\n}\r\n\r\nexport const storePartID = (part_id) => dispatch => {\r\n  dispatch({\r\n    type: PART_ID,\r\n    payload: part_id\r\n  })\r\n}","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        Hello, this is the homepage.\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { getExpt } from \"../actions/dataActions\";\r\n\r\nimport './Slider.css'\r\n\r\nclass Experiment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 0\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    this.displayExpt();\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit() {\r\n\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const allKeys = Object.keys(expt);\r\n    const questionKeys = allKeys.filter(k =>\r\n      k != \"userID\" && k != \"exptName\" && k != \"count\" && k != \"type\");\r\n\r\n    return questionKeys.map(k => {\r\n      if (expt[k]) {\r\n        if (expt[k][\"Type\"] == \"slider\") {\r\n          const lowRange = expt[k][\"lowRange\"];\r\n          const highRange = expt[k][\"highRange\"];\r\n          const question = expt[k][\"Question\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <form onSubmit={this.onSubmit}>\r\n                {question} <br/><br/>\r\n                <input \r\n                  type=\"range\" \r\n                  min={lowRange} \r\n                  max={highRange}\r\n                  name=\"value\"\r\n                  value={this.state.value}\r\n                  onChange={this.onChange}\r\n                />\r\n                {this.state.value}\r\n                <br/>\r\n                <input type=\"submit\" className=\"btn\"/>\r\n              </form>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  sendData(finalData) {\r\n    const username = this.props.match.params.username;\r\n    const exptName = this.props.match.params.expt;\r\n    const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n      username + '/' + exptName;\r\n    axios\r\n      .post(API_URL, finalData)\r\n      .then(res => {\r\n        console.log(res);\r\n        alert(\"You have successfully submitted your response.\");\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nExperiment.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt }\r\n)(Experiment);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport EnterID from \"./components/EnterID\";\nimport HomePage from \"./components/HomePage\";\nimport Experiment from \"./components/Experiment\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/participant-app/\">\n        <div className=\"App\">\n          < Route exact path=\"/\" component={HomePage} />\n          < Route exact path=\"/:username/:expt\" component={EnterID} />\n          < Route exact path=\"/:username/:expt/experiment\" component={Experiment}/>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}